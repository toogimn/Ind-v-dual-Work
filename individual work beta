import json

gradebook = []
language = "EN"  # Default language


def _(az, en):
    return az if language == "AZ" else en


def authenticate():
    password = input("🔐 Enter password / Parolu daxil et: ")
    if password != "1234":
        print("❌ Wrong password! / Parol yanlışdır!")
        exit()


def choose_language():
    global language
    lang = input("🌐 Choose language (AZ / EN): ").strip().upper()
    if lang in ["AZ", "EN"]:
        language = lang
    else:
        print("❗ Invalid choice. Defaulting to English.")
        language = "EN"


def load_from_file():
    global gradebook
    try:
        with open("gradebook.json", "r") as f:
            gradebook = json.load(f)
        print(_("✅ Məlumatlar yükləndi.", "✅ Data loaded."))
    except:
        gradebook = []
        print(_("⚠ Fayl tapılmadı, yeni başlanır.", "⚠ File not found, starting fresh."))

def save_to_file():
    with open("gradebook.json", "w") as f:
        json.dump(gradebook, f)
    print(_("💾 Fayla yazıldı.\n", "💾 Saved to file.\n"))


def main_menu():
    print(_("""\
========= Qiymət Kitabçası Menyusu =========
1. Yeni Tələbə Əlavə Et
2. Bütün Qeydləri Göstər
3. Axtarış
4. Yenilə
5. Sil
6. Statistikalar
7. Fayla Yaz
8. Fayldan Oxu
9. Rekursiv Say
10. Təlimat
11. Bütün Məlumatı Sil
0. Çıxış
============================================""", """\
========= Grade Book Menu =========
1. Add New Record
2. View All Records
3. Search Record
4. Update Record
5. Delete Record
6. Summary Statistics
7. Save to File
8. Load from File
9. Recursive Count
10. Help / Instructions
11. Clear All Data
0. Exit
==================================="""))

def add_record():
    name = input(_("Tələbə adı daxil edin: ", "Enter student name: "))
    grades = []
    while True:
        grade = input(_("Qiymət daxil et (çıxmaq üçün q): ", "Enter grade (or 'q' to quit): "))
        if grade.lower() == 'q':
            break
        try:
            grades.append(float(grade))
        except ValueError:
            print(_("Yanlış qiymət!", "Invalid grade!"))
    gradebook.append({"name": name, "grades": grades})
    save_to_file()
    print(_("✅ Qeyd əlavə olundu.\n", "✅ Record added.\n"))

def view_records():
    if not gradebook:
        print(_("🚫 Heç bir qeyd yoxdur.\n", "🚫 No records available.\n"))
        return
    for i, student in enumerate(gradebook, 1):
        grades = student['grades']
        avg = sum(grades)/len(grades) if grades else 0
        print(f"{i}. {student['name']} - {grades} | {_('Orta:', 'Average:')} {avg:.2f}")
    print()

def search_record():
    name = input(_("Axtarılacaq ad: ", "Enter name to search: "))
    found = False
    for student in gradebook:
        if name.lower() in student['name'].lower():
            print(f"🔍 {student['name']} - {student['grades']}")
            found = True
    if not found:
        print(_("❌ Tələbə tapılmadı.\n", "❌ Student not found.\n"))

def update_record():
    name = input(_("Yenilənəcək tələbənin adı: ", "Enter student name to update: "))
    for student in gradebook:
        if student['name'].lower() == name.lower():
            print(f"{_('Cari qiymətlər:', 'Current grades:')} {student['grades']}")
            new_grades = []
            while True:
                grade = input(_("Yeni qiymət (çıxmaq üçün q): ", "Enter new grade (or 'q' to quit): "))
                if grade.lower() == 'q':
                    break
                try:
                    new_grades.append(float(grade))
                except ValueError:
                    print(_("Yanlış qiymət!", "Invalid grade!"))
            student['grades'] = new_grades
            save_to_file()
            print(_("✅ Yeniləndi.\n", "✅ Grades updated.\n"))
            return
    print(_("❌ Tələbə tapılmadı.\n", "❌ Student not found.\n"))

def delete_record():
    name = input(_("Silinəcək ad: ", "Enter student name to delete: "))
    for i, student in enumerate(gradebook):
        if student['name'].lower() == name.lower():
            gradebook.pop(i)
            save_to_file()
            print(_("🗑 Tələbə silindi.\n", "🗑 Student deleted.\n"))
            return
    print(_("❌ Tələbə tapılmadı.\n", "❌ Student not found.\n"))

def summary_stats():
    if not gradebook:
        print(_("🚫 Heç bir qeyd yoxdur.\n", "🚫 No records available.\n"))
        return
    for student in gradebook:
        if student['grades']:
            avg = sum(student['grades']) / len(student['grades'])
            print(f"{student['name']} - {_('Orta:', 'Average:')} {avg:.2f}")
        else:
            print(f"{student['name']} {_('qiyməti yoxdur.', 'has no grades.')}")
    print()

def recursive_count(index=0):
    if index >= len(gradebook):
        return 0
    return 1 + recursive_count(index + 1)

def help_menu():
    print(_("""📖 Təlimat:
- Tələbələri və onların qiymətlərini əlavə et
- Axtar, sil, yenilə və bax
- Fayla saxla və fayldan yüklə
- Orta qiymətləri göstər
""", """
📖 Instructions:
- Add students and their grades
- View, search, update or delete records
- Save/load from file
- See average statistics
"""))

def clear_all_data():
    confirm = input(_("Bütün məlumatı silmək istədiyinizə əminsiniz? (bəli/xeyr): ", "Are you sure you want to clear all data? (yes/no): "))
    if confirm.lower() in ["bəli", "yes"]:
        gradebook.clear()
        save_to_file()
        print(_("🧹 Bütün məlumat silindi.\n", "🧹 All data cleared.\n"))
    else:
        print(_("❌ Ləğv edildi.\n", "❌ Cancelled.\n"))


def main():
    authenticate()
    choose_language()
    load_from_file()

    while True:
        main_menu()
        choice = input(_("Seçiminizi daxil edin: ", "Enter your choice: "))
        match choice:
            case "1": add_record()
            case "2": view_records()
            case "3": search_record()
            case "4": update_record()
            case "5": delete_record()
            case "6": summary_stats()
            case "7": save_to_file()
            case "8": load_from_file()
            case "9": print(f"{_('Ümumi qeyd sayı:', 'Total records:')} {recursive_count()}\n")
            case "10": help_menu()
            case "11": clear_all_data()
            case "0":
                save_to_file()
                print(_("📤 Çıxılır... Hələlik!", "📤 Exiting... Goodbye!"))
                break
            case _: print(_("❌ Yanlış seçim.\n", "❌ Invalid option.\n"))

if __name__ == "__main__":
    main()
