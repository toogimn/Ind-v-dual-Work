import json

gradebook = []
language = "EN"  # default


def _(az, en):
    return az if language == "AZ" else en


def choose_language():
    global language
    print("🌐 AZ / EN")
    lang = input("Dil seçin / Choose language: ").strip().upper()
    if lang in ["AZ", "EN"]:
        language = lang
    else:
        print("Yanlış seçim. Default olaraq English seçildi.")
        language = "EN"


def verify_human():
    correct = "2"
    print(_("Zəhmət olmasa insan olduğunuzu təsdiq edin:", "Please verify you're not a robot:"))
    print(_("Aşağıdakılardan iti seçin:", "Select the dog from the options below:"))
    options = ["1. 🐱", "2. 🐶", "3. 🐸", "4. 🐵"]
    for option in options:
        print(option)
    choice = input("> ")
    if choice != correct:
        print(_("Yanlış seçim. Proqram dayandırılır.", "Wrong choice. Exiting program."))
        exit()


def load_from_file():
    global gradebook
    try:
        with open("gradebook.json", "r") as f:
            gradebook = json.load(f)
        print(_("Məlumat yükləndi.", "Data loaded."))
    except:
        gradebook = []
        print(_("Fayl tapılmadı, boş başlanır.", "File not found, starting fresh."))

def save_to_file():
    with open("gradebook.json", "w") as f:
        json.dump(gradebook, f)


def main_menu():
    print(_("""
=== Menyu ===
1. Tələbə əlavə et
2. Bütün qeydlərə bax
3. Axtarış
4. Yenilə
5. Sil
6. Statistikalar
7. Fayla yaz
8. Fayldan oxu
9. Qeyd sayı
10. Təlimat
11. Bütün məlumatı sil
0. Çıxış
""", """
=== Menu ===
1. Add Student
2. View All
3. Search
4. Update
5. Delete
6. Statistics
7. Save to File
8. Load from File
9. Count Records
10. Help
11. Clear All
0. Exit
"""))


def add_record():
    name = input(_("Tələbə adı: ", "Student name: "))
    grades = []
    while True:
        grade = input(_("Qiymət (bitirmək üçün q): ", "Grade (or 'q' to quit): "))
        if grade.lower() == 'q':
            break
        try:
            grades.append(float(grade))
        except:
            print(_("Yanlış format!", "Invalid format!"))
    gradebook.append({"name": name, "grades": grades})
    save_to_file()
    print(_("Qeyd əlavə olundu.", "Record added."))

def view_records():
    if not gradebook:
        print(_("Qeyd yoxdur.", "No records available."))
        return
    for i, student in enumerate(gradebook, 1):
        print(f"{i}. {student['name']} - {student['grades']}")

def search_record():
    name = input(_("Axtarılan ad: ", "Enter name to search: "))
    found = False
    for student in gradebook:
        if name.lower() in student['name'].lower():
            print(f"{student['name']} - {student['grades']}")
            found = True
    if not found:
        print(_("Tələbə tapılmadı.", "Student not found."))

def update_record():
    name = input(_("Yeniləmək istədiyiniz ad: ", "Enter student name to update: "))
    for student in gradebook:
        if student['name'].lower() == name.lower():
            print(_("Cari qiymətlər: ", "Current grades: "), student['grades'])
            new_grades = []
            while True:
                grade = input(_("Yeni qiymət (bitirmək üçün q): ", "New grade (or 'q' to quit): "))
                if grade.lower() == 'q':
                    break
                try:
                    new_grades.append(float(grade))
                except:
                    print(_("Yanlış format!", "Invalid format!"))
            student['grades'] = new_grades
            save_to_file()
            print(_("Yeniləndi.", "Updated."))
            return
    print(_("Tələbə tapılmadı.", "Student not found."))

def delete_record():
    name = input(_("Silinəcək ad: ", "Enter name to delete: "))
    for i, student in enumerate(gradebook):
        if student['name'].lower() == name.lower():
            gradebook.pop(i)
            save_to_file()
            print(_("Silindi.", "Deleted."))
            return
    print(_("Tapılmadı.", "Not found."))

def summary_stats():
    if not gradebook:
        print(_("Qeyd yoxdur.", "No data available."))
        return
    for student in gradebook:
        grades = student['grades']
        if grades:
            avg = sum(grades) / len(grades)
            print(f"{student['name']} - {_( 'Orta:', 'Average:')} {avg:.2f}")
        else:
            print(f"{student['name']} - {_('Qiymət yoxdur.', 'No grades.')}")

def recursive_count(index=0):
    if index >= len(gradebook):
        return 0
    return 1 + recursive_count(index + 1)

def help_menu():
    print(_("""
İstifadəçi təlimatı:
- Tələbə əlavə edin və qiymətlər daxil edin
- Axtarın, yeniləyin və silin
- Statistik məlumatlara baxın
- Fayla yazın və oxuyun
""", """
Instructions:
- Add students and enter grades
- Search, update and delete entries
- View statistics
- Save/load data from file
"""))

def clear_all_data():
    confirm = input(_("Bütün məlumatı silmək istəyirsiniz? (bəli/xeyr): ", "Clear all data? (yes/no): "))
    if confirm.lower() in ["bəli", "yes"]:
        gradebook.clear()
        save_to_file()
        print(_("Məlumat silindi.", "Data cleared."))
    else:
        print(_("Əməliyyat ləğv edildi.", "Cancelled."))


def main():
    choose_language()
    verify_human()
    load_from_file()

    while True:
        main_menu()
        choice = input(_("Seçim: ", "Choice: "))
        match choice:
            case "1": add_record()
            case "2": view_records()
            case "3": search_record()
            case "4": update_record()
            case "5": delete_record()
            case "6": summary_stats()
            case "7": save_to_file()
            case "8": load_from_file()
            case "9": print(f"{_('Qeyd sayı:', 'Total records:')} {recursive_count()}")
            case "10": help_menu()
            case "11": clear_all_data()
            case "0":
                save_to_file()
                print(_("Proqram bağlanır...", "Exiting..."))
                break
            case _: print(_("Yanlış seçim.", "Invalid choice."))

if __name__ == "__main__":
    main()
